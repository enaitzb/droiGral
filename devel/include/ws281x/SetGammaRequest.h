// Generated by gencpp from file ws281x/SetGammaRequest.msg
// DO NOT EDIT!


#ifndef WS281X_MESSAGE_SETGAMMAREQUEST_H
#define WS281X_MESSAGE_SETGAMMAREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ws281x
{
template <class ContainerAllocator>
struct SetGammaRequest_
{
  typedef SetGammaRequest_<ContainerAllocator> Type;

  SetGammaRequest_()
    : gamma()  {
      gamma.assign(0);
  }
  SetGammaRequest_(const ContainerAllocator& _alloc)
    : gamma()  {
  (void)_alloc;
      gamma.assign(0);
  }



   typedef boost::array<uint8_t, 256>  _gamma_type;
  _gamma_type gamma;





  typedef boost::shared_ptr< ::ws281x::SetGammaRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ws281x::SetGammaRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetGammaRequest_

typedef ::ws281x::SetGammaRequest_<std::allocator<void> > SetGammaRequest;

typedef boost::shared_ptr< ::ws281x::SetGammaRequest > SetGammaRequestPtr;
typedef boost::shared_ptr< ::ws281x::SetGammaRequest const> SetGammaRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ws281x::SetGammaRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ws281x::SetGammaRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ws281x::SetGammaRequest_<ContainerAllocator1> & lhs, const ::ws281x::SetGammaRequest_<ContainerAllocator2> & rhs)
{
  return lhs.gamma == rhs.gamma;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ws281x::SetGammaRequest_<ContainerAllocator1> & lhs, const ::ws281x::SetGammaRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ws281x

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ws281x::SetGammaRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ws281x::SetGammaRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ws281x::SetGammaRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ws281x::SetGammaRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ws281x::SetGammaRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ws281x::SetGammaRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ws281x::SetGammaRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a08443963f514e7b9d053771973ae1a0";
  }

  static const char* value(const ::ws281x::SetGammaRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa08443963f514e7bULL;
  static const uint64_t static_value2 = 0x9d053771973ae1a0ULL;
};

template<class ContainerAllocator>
struct DataType< ::ws281x::SetGammaRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ws281x/SetGammaRequest";
  }

  static const char* value(const ::ws281x::SetGammaRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ws281x::SetGammaRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8[256] gamma\n"
;
  }

  static const char* value(const ::ws281x::SetGammaRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ws281x::SetGammaRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.gamma);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetGammaRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ws281x::SetGammaRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ws281x::SetGammaRequest_<ContainerAllocator>& v)
  {
    s << indent << "gamma[]" << std::endl;
    for (size_t i = 0; i < v.gamma.size(); ++i)
    {
      s << indent << "  gamma[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.gamma[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // WS281X_MESSAGE_SETGAMMAREQUEST_H
