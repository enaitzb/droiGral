// Generated by gencpp from file klt_feature_tracker/TrackFeaturesRequest.msg
// DO NOT EDIT!


#ifndef KLT_FEATURE_TRACKER_MESSAGE_TRACKFEATURESREQUEST_H
#define KLT_FEATURE_TRACKER_MESSAGE_TRACKFEATURESREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <sensor_msgs/Image.h>
#include <sensor_msgs/Image.h>

namespace klt_feature_tracker
{
template <class ContainerAllocator>
struct TrackFeaturesRequest_
{
  typedef TrackFeaturesRequest_<ContainerAllocator> Type;

  TrackFeaturesRequest_()
    : left_image()
    , right_image()
    , update_vect()
    , stereo(0)  {
    }
  TrackFeaturesRequest_(const ContainerAllocator& _alloc)
    : left_image(_alloc)
    , right_image(_alloc)
    , update_vect(_alloc)
    , stereo(0)  {
  (void)_alloc;
    }



   typedef  ::sensor_msgs::Image_<ContainerAllocator>  _left_image_type;
  _left_image_type left_image;

   typedef  ::sensor_msgs::Image_<ContainerAllocator>  _right_image_type;
  _right_image_type right_image;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _update_vect_type;
  _update_vect_type update_vect;

   typedef int32_t _stereo_type;
  _stereo_type stereo;





  typedef boost::shared_ptr< ::klt_feature_tracker::TrackFeaturesRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::klt_feature_tracker::TrackFeaturesRequest_<ContainerAllocator> const> ConstPtr;

}; // struct TrackFeaturesRequest_

typedef ::klt_feature_tracker::TrackFeaturesRequest_<std::allocator<void> > TrackFeaturesRequest;

typedef boost::shared_ptr< ::klt_feature_tracker::TrackFeaturesRequest > TrackFeaturesRequestPtr;
typedef boost::shared_ptr< ::klt_feature_tracker::TrackFeaturesRequest const> TrackFeaturesRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::klt_feature_tracker::TrackFeaturesRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::klt_feature_tracker::TrackFeaturesRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::klt_feature_tracker::TrackFeaturesRequest_<ContainerAllocator1> & lhs, const ::klt_feature_tracker::TrackFeaturesRequest_<ContainerAllocator2> & rhs)
{
  return lhs.left_image == rhs.left_image &&
    lhs.right_image == rhs.right_image &&
    lhs.update_vect == rhs.update_vect &&
    lhs.stereo == rhs.stereo;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::klt_feature_tracker::TrackFeaturesRequest_<ContainerAllocator1> & lhs, const ::klt_feature_tracker::TrackFeaturesRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace klt_feature_tracker

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::klt_feature_tracker::TrackFeaturesRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::klt_feature_tracker::TrackFeaturesRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::klt_feature_tracker::TrackFeaturesRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::klt_feature_tracker::TrackFeaturesRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::klt_feature_tracker::TrackFeaturesRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::klt_feature_tracker::TrackFeaturesRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::klt_feature_tracker::TrackFeaturesRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e6ba594a5fc048bf5a4498bc48e6665e";
  }

  static const char* value(const ::klt_feature_tracker::TrackFeaturesRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe6ba594a5fc048bfULL;
  static const uint64_t static_value2 = 0x5a4498bc48e6665eULL;
};

template<class ContainerAllocator>
struct DataType< ::klt_feature_tracker::TrackFeaturesRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "klt_feature_tracker/TrackFeaturesRequest";
  }

  static const char* value(const ::klt_feature_tracker::TrackFeaturesRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::klt_feature_tracker::TrackFeaturesRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sensor_msgs/Image left_image\n"
"sensor_msgs/Image right_image\n"
"int32[] update_vect\n"
"int32 stereo\n"
"\n"
"================================================================================\n"
"MSG: sensor_msgs/Image\n"
"# This message contains an uncompressed image\n"
"# (0, 0) is at top-left corner of image\n"
"#\n"
"\n"
"Header header        # Header timestamp should be acquisition time of image\n"
"                     # Header frame_id should be optical frame of camera\n"
"                     # origin of frame should be optical center of camera\n"
"                     # +x should point to the right in the image\n"
"                     # +y should point down in the image\n"
"                     # +z should point into to plane of the image\n"
"                     # If the frame_id here and the frame_id of the CameraInfo\n"
"                     # message associated with the image conflict\n"
"                     # the behavior is undefined\n"
"\n"
"uint32 height         # image height, that is, number of rows\n"
"uint32 width          # image width, that is, number of columns\n"
"\n"
"# The legal values for encoding are in file src/image_encodings.cpp\n"
"# If you want to standardize a new string format, join\n"
"# ros-users@lists.sourceforge.net and send an email proposing a new encoding.\n"
"\n"
"string encoding       # Encoding of pixels -- channel meaning, ordering, size\n"
"                      # taken from the list of strings in include/sensor_msgs/image_encodings.h\n"
"\n"
"uint8 is_bigendian    # is this data bigendian?\n"
"uint32 step           # Full row length in bytes\n"
"uint8[] data          # actual matrix data, size is (step * rows)\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::klt_feature_tracker::TrackFeaturesRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::klt_feature_tracker::TrackFeaturesRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.left_image);
      stream.next(m.right_image);
      stream.next(m.update_vect);
      stream.next(m.stereo);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TrackFeaturesRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::klt_feature_tracker::TrackFeaturesRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::klt_feature_tracker::TrackFeaturesRequest_<ContainerAllocator>& v)
  {
    s << indent << "left_image: ";
    s << std::endl;
    Printer< ::sensor_msgs::Image_<ContainerAllocator> >::stream(s, indent + "  ", v.left_image);
    s << indent << "right_image: ";
    s << std::endl;
    Printer< ::sensor_msgs::Image_<ContainerAllocator> >::stream(s, indent + "  ", v.right_image);
    s << indent << "update_vect[]" << std::endl;
    for (size_t i = 0; i < v.update_vect.size(); ++i)
    {
      s << indent << "  update_vect[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.update_vect[i]);
    }
    s << indent << "stereo: ";
    Printer<int32_t>::stream(s, indent + "  ", v.stereo);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KLT_FEATURE_TRACKER_MESSAGE_TRACKFEATURESREQUEST_H
