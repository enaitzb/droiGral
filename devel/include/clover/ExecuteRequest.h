// Generated by gencpp from file clover/ExecuteRequest.msg
// DO NOT EDIT!


#ifndef CLOVER_MESSAGE_EXECUTEREQUEST_H
#define CLOVER_MESSAGE_EXECUTEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace clover
{
template <class ContainerAllocator>
struct ExecuteRequest_
{
  typedef ExecuteRequest_<ContainerAllocator> Type;

  ExecuteRequest_()
    : cmd()  {
    }
  ExecuteRequest_(const ContainerAllocator& _alloc)
    : cmd(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _cmd_type;
  _cmd_type cmd;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(CODE_FAIL)
  #undef CODE_FAIL
#endif
#if defined(_WIN32) && defined(CODE_TIMEOUT)
  #undef CODE_TIMEOUT
#endif

  enum {
    CODE_FAIL = -1,
    CODE_TIMEOUT = -2,
  };


  typedef boost::shared_ptr< ::clover::ExecuteRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::clover::ExecuteRequest_<ContainerAllocator> const> ConstPtr;

}; // struct ExecuteRequest_

typedef ::clover::ExecuteRequest_<std::allocator<void> > ExecuteRequest;

typedef boost::shared_ptr< ::clover::ExecuteRequest > ExecuteRequestPtr;
typedef boost::shared_ptr< ::clover::ExecuteRequest const> ExecuteRequestConstPtr;

// constants requiring out of line definition

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::clover::ExecuteRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::clover::ExecuteRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::clover::ExecuteRequest_<ContainerAllocator1> & lhs, const ::clover::ExecuteRequest_<ContainerAllocator2> & rhs)
{
  return lhs.cmd == rhs.cmd;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::clover::ExecuteRequest_<ContainerAllocator1> & lhs, const ::clover::ExecuteRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace clover

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::clover::ExecuteRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::clover::ExecuteRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::clover::ExecuteRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::clover::ExecuteRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::clover::ExecuteRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::clover::ExecuteRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::clover::ExecuteRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "650cf1e4935016e0a51917efee33ef2d";
  }

  static const char* value(const ::clover::ExecuteRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x650cf1e4935016e0ULL;
  static const uint64_t static_value2 = 0xa51917efee33ef2dULL;
};

template<class ContainerAllocator>
struct DataType< ::clover::ExecuteRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "clover/ExecuteRequest";
  }

  static const char* value(const ::clover::ExecuteRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::clover::ExecuteRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 CODE_FAIL = -1\n"
"int32 CODE_TIMEOUT = -2\n"
"\n"
"string cmd\n"
;
  }

  static const char* value(const ::clover::ExecuteRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::clover::ExecuteRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.cmd);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ExecuteRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::clover::ExecuteRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::clover::ExecuteRequest_<ContainerAllocator>& v)
  {
    s << indent << "cmd: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.cmd);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CLOVER_MESSAGE_EXECUTEREQUEST_H
