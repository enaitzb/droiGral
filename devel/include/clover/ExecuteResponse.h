// Generated by gencpp from file clover/ExecuteResponse.msg
// DO NOT EDIT!


#ifndef CLOVER_MESSAGE_EXECUTERESPONSE_H
#define CLOVER_MESSAGE_EXECUTERESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace clover
{
template <class ContainerAllocator>
struct ExecuteResponse_
{
  typedef ExecuteResponse_<ContainerAllocator> Type;

  ExecuteResponse_()
    : output()
    , code(0)  {
    }
  ExecuteResponse_(const ContainerAllocator& _alloc)
    : output(_alloc)
    , code(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _output_type;
  _output_type output;

   typedef int32_t _code_type;
  _code_type code;





  typedef boost::shared_ptr< ::clover::ExecuteResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::clover::ExecuteResponse_<ContainerAllocator> const> ConstPtr;

}; // struct ExecuteResponse_

typedef ::clover::ExecuteResponse_<std::allocator<void> > ExecuteResponse;

typedef boost::shared_ptr< ::clover::ExecuteResponse > ExecuteResponsePtr;
typedef boost::shared_ptr< ::clover::ExecuteResponse const> ExecuteResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::clover::ExecuteResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::clover::ExecuteResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::clover::ExecuteResponse_<ContainerAllocator1> & lhs, const ::clover::ExecuteResponse_<ContainerAllocator2> & rhs)
{
  return lhs.output == rhs.output &&
    lhs.code == rhs.code;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::clover::ExecuteResponse_<ContainerAllocator1> & lhs, const ::clover::ExecuteResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace clover

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::clover::ExecuteResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::clover::ExecuteResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::clover::ExecuteResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::clover::ExecuteResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::clover::ExecuteResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::clover::ExecuteResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::clover::ExecuteResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d5b7f2e72c451a920e3fbb15b93f01be";
  }

  static const char* value(const ::clover::ExecuteResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd5b7f2e72c451a92ULL;
  static const uint64_t static_value2 = 0x0e3fbb15b93f01beULL;
};

template<class ContainerAllocator>
struct DataType< ::clover::ExecuteResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "clover/ExecuteResponse";
  }

  static const char* value(const ::clover::ExecuteResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::clover::ExecuteResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string output\n"
"int32 code\n"
"\n"
;
  }

  static const char* value(const ::clover::ExecuteResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::clover::ExecuteResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.output);
      stream.next(m.code);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ExecuteResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::clover::ExecuteResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::clover::ExecuteResponse_<ContainerAllocator>& v)
  {
    s << indent << "output: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.output);
    s << indent << "code: ";
    Printer<int32_t>::stream(s, indent + "  ", v.code);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CLOVER_MESSAGE_EXECUTERESPONSE_H
