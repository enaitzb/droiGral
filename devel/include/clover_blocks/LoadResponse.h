// Generated by gencpp from file clover_blocks/LoadResponse.msg
// DO NOT EDIT!


#ifndef CLOVER_BLOCKS_MESSAGE_LOADRESPONSE_H
#define CLOVER_BLOCKS_MESSAGE_LOADRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace clover_blocks
{
template <class ContainerAllocator>
struct LoadResponse_
{
  typedef LoadResponse_<ContainerAllocator> Type;

  LoadResponse_()
    : success(false)
    , message()
    , names()
    , programs()  {
    }
  LoadResponse_(const ContainerAllocator& _alloc)
    : success(false)
    , message(_alloc)
    , names(_alloc)
    , programs(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _success_type;
  _success_type success;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _message_type;
  _message_type message;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _names_type;
  _names_type names;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _programs_type;
  _programs_type programs;





  typedef boost::shared_ptr< ::clover_blocks::LoadResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::clover_blocks::LoadResponse_<ContainerAllocator> const> ConstPtr;

}; // struct LoadResponse_

typedef ::clover_blocks::LoadResponse_<std::allocator<void> > LoadResponse;

typedef boost::shared_ptr< ::clover_blocks::LoadResponse > LoadResponsePtr;
typedef boost::shared_ptr< ::clover_blocks::LoadResponse const> LoadResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::clover_blocks::LoadResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::clover_blocks::LoadResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::clover_blocks::LoadResponse_<ContainerAllocator1> & lhs, const ::clover_blocks::LoadResponse_<ContainerAllocator2> & rhs)
{
  return lhs.success == rhs.success &&
    lhs.message == rhs.message &&
    lhs.names == rhs.names &&
    lhs.programs == rhs.programs;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::clover_blocks::LoadResponse_<ContainerAllocator1> & lhs, const ::clover_blocks::LoadResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace clover_blocks

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::clover_blocks::LoadResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::clover_blocks::LoadResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::clover_blocks::LoadResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::clover_blocks::LoadResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::clover_blocks::LoadResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::clover_blocks::LoadResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::clover_blocks::LoadResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "591c1a24e79f31bc423b909d1e92af1b";
  }

  static const char* value(const ::clover_blocks::LoadResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x591c1a24e79f31bcULL;
  static const uint64_t static_value2 = 0x423b909d1e92af1bULL;
};

template<class ContainerAllocator>
struct DataType< ::clover_blocks::LoadResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "clover_blocks/LoadResponse";
  }

  static const char* value(const ::clover_blocks::LoadResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::clover_blocks::LoadResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool success\n"
"string message\n"
"string[] names\n"
"string[] programs\n"
"\n"
;
  }

  static const char* value(const ::clover_blocks::LoadResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::clover_blocks::LoadResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.success);
      stream.next(m.message);
      stream.next(m.names);
      stream.next(m.programs);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LoadResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::clover_blocks::LoadResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::clover_blocks::LoadResponse_<ContainerAllocator>& v)
  {
    s << indent << "success: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.success);
    s << indent << "message: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.message);
    s << indent << "names[]" << std::endl;
    for (size_t i = 0; i < v.names.size(); ++i)
    {
      s << indent << "  names[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.names[i]);
    }
    s << indent << "programs[]" << std::endl;
    for (size_t i = 0; i < v.programs.size(); ++i)
    {
      s << indent << "  programs[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.programs[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // CLOVER_BLOCKS_MESSAGE_LOADRESPONSE_H
