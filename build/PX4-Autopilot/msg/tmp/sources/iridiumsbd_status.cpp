/****************************************************************************
 *
 *   Copyright (C) 2013-2016 PX4 Development Team. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 * 3. Neither the name PX4 nor the names of its contributors may be
 *    used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
 * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 ****************************************************************************/

/* Auto-generated by genmsg_cpp from file iridiumsbd_status.msg */


#include <inttypes.h>
#include <px4_platform_common/log.h>
#include <px4_platform_common/defines.h>
#include <uORB/topics/iridiumsbd_status.h>
#include <uORB/topics/uORBTopics.hpp>
#include <drivers/drv_hrt.h>
#include <lib/drivers/device/Device.hpp>
#include <lib/matrix/matrix/math.hpp>
#include <lib/mathlib/mathlib.h>

constexpr char __orb_iridiumsbd_status_fields[] = "uint64_t timestamp;uint64_t last_heartbeat;uint16_t tx_buf_write_index;uint16_t rx_buf_read_index;uint16_t rx_buf_end_index;uint16_t failed_sbd_sessions;uint16_t successful_sbd_sessions;uint16_t num_tx_buf_reset;uint8_t signal_quality;uint8_t state;bool ring_pending;bool tx_buf_write_pending;bool tx_session_pending;bool rx_read_pending;bool rx_session_pending;uint8_t[5] _padding0;";

ORB_DEFINE(iridiumsbd_status, struct iridiumsbd_status_s, 35, __orb_iridiumsbd_status_fields, static_cast<uint8_t>(ORB_ID::iridiumsbd_status));


void print_message(const iridiumsbd_status_s &message)
{

	PX4_INFO_RAW(" iridiumsbd_status_s\n");

	const hrt_abstime now = hrt_absolute_time();

	if (message.timestamp != 0) {
		PX4_INFO_RAW("\ttimestamp: %" PRIu64 "  (%.6f seconds ago)\n", message.timestamp, (now - message.timestamp) / 1e6);
	} else {
		PX4_INFO_RAW("\n");
	}
	PX4_INFO_RAW("\tlast_heartbeat: %" PRIu64 "\n", message.last_heartbeat);
	PX4_INFO_RAW("\ttx_buf_write_index: %u\n", message.tx_buf_write_index);
	PX4_INFO_RAW("\trx_buf_read_index: %u\n", message.rx_buf_read_index);
	PX4_INFO_RAW("\trx_buf_end_index: %u\n", message.rx_buf_end_index);
	PX4_INFO_RAW("\tfailed_sbd_sessions: %u\n", message.failed_sbd_sessions);
	PX4_INFO_RAW("\tsuccessful_sbd_sessions: %u\n", message.successful_sbd_sessions);
	PX4_INFO_RAW("\tnum_tx_buf_reset: %u\n", message.num_tx_buf_reset);
	PX4_INFO_RAW("\tsignal_quality: %u\n", message.signal_quality);
	PX4_INFO_RAW("\tstate: %u\n", message.state);
	PX4_INFO_RAW("\tring_pending: %s\n", (message.ring_pending ? "True" : "False"));
	PX4_INFO_RAW("\ttx_buf_write_pending: %s\n", (message.tx_buf_write_pending ? "True" : "False"));
	PX4_INFO_RAW("\ttx_session_pending: %s\n", (message.tx_session_pending ? "True" : "False"));
	PX4_INFO_RAW("\trx_read_pending: %s\n", (message.rx_read_pending ? "True" : "False"));
	PX4_INFO_RAW("\trx_session_pending: %s\n", (message.rx_session_pending ? "True" : "False"));
	
}
