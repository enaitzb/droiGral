/****************************************************************************
 *
 *   Copyright (C) 2013-2016 PX4 Development Team. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 * 3. Neither the name PX4 nor the names of its contributors may be
 *    used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
 * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 ****************************************************************************/

/* Auto-generated by genmsg_cpp from file estimator_status_flags.msg */


#include <inttypes.h>
#include <px4_platform_common/log.h>
#include <px4_platform_common/defines.h>
#include <uORB/topics/estimator_status_flags.h>
#include <uORB/topics/uORBTopics.hpp>
#include <drivers/drv_hrt.h>
#include <lib/drivers/device/Device.hpp>
#include <lib/matrix/matrix/math.hpp>
#include <lib/mathlib/mathlib.h>

constexpr char __orb_estimator_status_flags_fields[] = "uint64_t timestamp;uint64_t timestamp_sample;uint32_t control_status_changes;uint32_t fault_status_changes;uint32_t innovation_fault_status_changes;bool cs_tilt_align;bool cs_yaw_align;bool cs_gps;bool cs_opt_flow;bool cs_mag_hdg;bool cs_mag_3d;bool cs_mag_dec;bool cs_in_air;bool cs_wind;bool cs_baro_hgt;bool cs_rng_hgt;bool cs_gps_hgt;bool cs_ev_pos;bool cs_ev_yaw;bool cs_ev_hgt;bool cs_fuse_beta;bool cs_mag_field_disturbed;bool cs_fixed_wing;bool cs_mag_fault;bool cs_fuse_aspd;bool cs_gnd_effect;bool cs_rng_stuck;bool cs_gps_yaw;bool cs_mag_aligned_in_flight;bool cs_ev_vel;bool cs_synthetic_mag_z;bool cs_vehicle_at_rest;bool fs_bad_mag_x;bool fs_bad_mag_y;bool fs_bad_mag_z;bool fs_bad_hdg;bool fs_bad_mag_decl;bool fs_bad_airspeed;bool fs_bad_sideslip;bool fs_bad_optflow_x;bool fs_bad_optflow_y;bool fs_bad_vel_n;bool fs_bad_vel_e;bool fs_bad_vel_d;bool fs_bad_pos_n;bool fs_bad_pos_e;bool fs_bad_pos_d;bool fs_bad_acc_bias;bool fs_bad_acc_vertical;bool fs_bad_acc_clipping;bool reject_hor_vel;bool reject_ver_vel;bool reject_hor_pos;bool reject_ver_pos;bool reject_mag_x;bool reject_mag_y;bool reject_mag_z;bool reject_yaw;bool reject_airspeed;bool reject_sideslip;bool reject_hagl;bool reject_optflow_x;bool reject_optflow_y;uint8_t[2] _padding0;";

ORB_DEFINE(estimator_status_flags, struct estimator_status_flags_s, 86, __orb_estimator_status_flags_fields, static_cast<uint8_t>(ORB_ID::estimator_status_flags));


void print_message(const estimator_status_flags_s &message)
{

	PX4_INFO_RAW(" estimator_status_flags_s\n");

	const hrt_abstime now = hrt_absolute_time();

	if (message.timestamp != 0) {
		PX4_INFO_RAW("\ttimestamp: %" PRIu64 "  (%.6f seconds ago)\n", message.timestamp, (now - message.timestamp) / 1e6);
	} else {
		PX4_INFO_RAW("\n");
	}
	
	PX4_INFO_RAW("\ttimestamp_sample: %" PRIu64 "  (%" PRIu64 " us before timestamp)\n", message.timestamp_sample, message.timestamp - message.timestamp_sample);
	
	PX4_INFO_RAW("\tcontrol_status_changes: %" PRIu32 "\n", message.control_status_changes);
	PX4_INFO_RAW("\tfault_status_changes: %" PRIu32 "\n", message.fault_status_changes);
	PX4_INFO_RAW("\tinnovation_fault_status_changes: %" PRIu32 "\n", message.innovation_fault_status_changes);
	PX4_INFO_RAW("\tcs_tilt_align: %s\n", (message.cs_tilt_align ? "True" : "False"));
	PX4_INFO_RAW("\tcs_yaw_align: %s\n", (message.cs_yaw_align ? "True" : "False"));
	PX4_INFO_RAW("\tcs_gps: %s\n", (message.cs_gps ? "True" : "False"));
	PX4_INFO_RAW("\tcs_opt_flow: %s\n", (message.cs_opt_flow ? "True" : "False"));
	PX4_INFO_RAW("\tcs_mag_hdg: %s\n", (message.cs_mag_hdg ? "True" : "False"));
	PX4_INFO_RAW("\tcs_mag_3d: %s\n", (message.cs_mag_3d ? "True" : "False"));
	PX4_INFO_RAW("\tcs_mag_dec: %s\n", (message.cs_mag_dec ? "True" : "False"));
	PX4_INFO_RAW("\tcs_in_air: %s\n", (message.cs_in_air ? "True" : "False"));
	PX4_INFO_RAW("\tcs_wind: %s\n", (message.cs_wind ? "True" : "False"));
	PX4_INFO_RAW("\tcs_baro_hgt: %s\n", (message.cs_baro_hgt ? "True" : "False"));
	PX4_INFO_RAW("\tcs_rng_hgt: %s\n", (message.cs_rng_hgt ? "True" : "False"));
	PX4_INFO_RAW("\tcs_gps_hgt: %s\n", (message.cs_gps_hgt ? "True" : "False"));
	PX4_INFO_RAW("\tcs_ev_pos: %s\n", (message.cs_ev_pos ? "True" : "False"));
	PX4_INFO_RAW("\tcs_ev_yaw: %s\n", (message.cs_ev_yaw ? "True" : "False"));
	PX4_INFO_RAW("\tcs_ev_hgt: %s\n", (message.cs_ev_hgt ? "True" : "False"));
	PX4_INFO_RAW("\tcs_fuse_beta: %s\n", (message.cs_fuse_beta ? "True" : "False"));
	PX4_INFO_RAW("\tcs_mag_field_disturbed: %s\n", (message.cs_mag_field_disturbed ? "True" : "False"));
	PX4_INFO_RAW("\tcs_fixed_wing: %s\n", (message.cs_fixed_wing ? "True" : "False"));
	PX4_INFO_RAW("\tcs_mag_fault: %s\n", (message.cs_mag_fault ? "True" : "False"));
	PX4_INFO_RAW("\tcs_fuse_aspd: %s\n", (message.cs_fuse_aspd ? "True" : "False"));
	PX4_INFO_RAW("\tcs_gnd_effect: %s\n", (message.cs_gnd_effect ? "True" : "False"));
	PX4_INFO_RAW("\tcs_rng_stuck: %s\n", (message.cs_rng_stuck ? "True" : "False"));
	PX4_INFO_RAW("\tcs_gps_yaw: %s\n", (message.cs_gps_yaw ? "True" : "False"));
	PX4_INFO_RAW("\tcs_mag_aligned_in_flight: %s\n", (message.cs_mag_aligned_in_flight ? "True" : "False"));
	PX4_INFO_RAW("\tcs_ev_vel: %s\n", (message.cs_ev_vel ? "True" : "False"));
	PX4_INFO_RAW("\tcs_synthetic_mag_z: %s\n", (message.cs_synthetic_mag_z ? "True" : "False"));
	PX4_INFO_RAW("\tcs_vehicle_at_rest: %s\n", (message.cs_vehicle_at_rest ? "True" : "False"));
	PX4_INFO_RAW("\tfs_bad_mag_x: %s\n", (message.fs_bad_mag_x ? "True" : "False"));
	PX4_INFO_RAW("\tfs_bad_mag_y: %s\n", (message.fs_bad_mag_y ? "True" : "False"));
	PX4_INFO_RAW("\tfs_bad_mag_z: %s\n", (message.fs_bad_mag_z ? "True" : "False"));
	PX4_INFO_RAW("\tfs_bad_hdg: %s\n", (message.fs_bad_hdg ? "True" : "False"));
	PX4_INFO_RAW("\tfs_bad_mag_decl: %s\n", (message.fs_bad_mag_decl ? "True" : "False"));
	PX4_INFO_RAW("\tfs_bad_airspeed: %s\n", (message.fs_bad_airspeed ? "True" : "False"));
	PX4_INFO_RAW("\tfs_bad_sideslip: %s\n", (message.fs_bad_sideslip ? "True" : "False"));
	PX4_INFO_RAW("\tfs_bad_optflow_x: %s\n", (message.fs_bad_optflow_x ? "True" : "False"));
	PX4_INFO_RAW("\tfs_bad_optflow_y: %s\n", (message.fs_bad_optflow_y ? "True" : "False"));
	PX4_INFO_RAW("\tfs_bad_vel_n: %s\n", (message.fs_bad_vel_n ? "True" : "False"));
	PX4_INFO_RAW("\tfs_bad_vel_e: %s\n", (message.fs_bad_vel_e ? "True" : "False"));
	PX4_INFO_RAW("\tfs_bad_vel_d: %s\n", (message.fs_bad_vel_d ? "True" : "False"));
	PX4_INFO_RAW("\tfs_bad_pos_n: %s\n", (message.fs_bad_pos_n ? "True" : "False"));
	PX4_INFO_RAW("\tfs_bad_pos_e: %s\n", (message.fs_bad_pos_e ? "True" : "False"));
	PX4_INFO_RAW("\tfs_bad_pos_d: %s\n", (message.fs_bad_pos_d ? "True" : "False"));
	PX4_INFO_RAW("\tfs_bad_acc_bias: %s\n", (message.fs_bad_acc_bias ? "True" : "False"));
	PX4_INFO_RAW("\tfs_bad_acc_vertical: %s\n", (message.fs_bad_acc_vertical ? "True" : "False"));
	PX4_INFO_RAW("\tfs_bad_acc_clipping: %s\n", (message.fs_bad_acc_clipping ? "True" : "False"));
	PX4_INFO_RAW("\treject_hor_vel: %s\n", (message.reject_hor_vel ? "True" : "False"));
	PX4_INFO_RAW("\treject_ver_vel: %s\n", (message.reject_ver_vel ? "True" : "False"));
	PX4_INFO_RAW("\treject_hor_pos: %s\n", (message.reject_hor_pos ? "True" : "False"));
	PX4_INFO_RAW("\treject_ver_pos: %s\n", (message.reject_ver_pos ? "True" : "False"));
	PX4_INFO_RAW("\treject_mag_x: %s\n", (message.reject_mag_x ? "True" : "False"));
	PX4_INFO_RAW("\treject_mag_y: %s\n", (message.reject_mag_y ? "True" : "False"));
	PX4_INFO_RAW("\treject_mag_z: %s\n", (message.reject_mag_z ? "True" : "False"));
	PX4_INFO_RAW("\treject_yaw: %s\n", (message.reject_yaw ? "True" : "False"));
	PX4_INFO_RAW("\treject_airspeed: %s\n", (message.reject_airspeed ? "True" : "False"));
	PX4_INFO_RAW("\treject_sideslip: %s\n", (message.reject_sideslip ? "True" : "False"));
	PX4_INFO_RAW("\treject_hagl: %s\n", (message.reject_hagl ? "True" : "False"));
	PX4_INFO_RAW("\treject_optflow_x: %s\n", (message.reject_optflow_x ? "True" : "False"));
	PX4_INFO_RAW("\treject_optflow_y: %s\n", (message.reject_optflow_y ? "True" : "False"));
	
}
