/****************************************************************************
 *
 *   Copyright (C) 2013-2016 PX4 Development Team. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 * 3. Neither the name PX4 nor the names of its contributors may be
 *    used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
 * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 ****************************************************************************/

/* Auto-generated by genmsg_cpp from file gimbal_device_information.msg */


#include <inttypes.h>
#include <px4_platform_common/log.h>
#include <px4_platform_common/defines.h>
#include <uORB/topics/gimbal_device_information.h>
#include <uORB/topics/uORBTopics.hpp>
#include <drivers/drv_hrt.h>
#include <lib/drivers/device/Device.hpp>
#include <lib/matrix/matrix/math.hpp>
#include <lib/mathlib/mathlib.h>

constexpr char __orb_gimbal_device_information_fields[] = "uint64_t timestamp;uint64_t uid;uint32_t firmware_version;uint32_t hardware_version;float roll_min;float roll_max;float pitch_min;float pitch_max;float yaw_min;float yaw_max;uint16_t cap_flags;uint16_t custom_cap_flags;uint8_t[32] vendor_name;uint8_t[32] model_name;uint8_t[32] custom_name;uint8_t gimbal_device_compid;uint8_t[3] _padding0;";

ORB_DEFINE(gimbal_device_information, struct gimbal_device_information_s, 149, __orb_gimbal_device_information_fields, static_cast<uint8_t>(ORB_ID::gimbal_device_information));


void print_message(const gimbal_device_information_s &message)
{

	PX4_INFO_RAW(" gimbal_device_information_s\n");

	const hrt_abstime now = hrt_absolute_time();

	if (message.timestamp != 0) {
		PX4_INFO_RAW("\ttimestamp: %" PRIu64 "  (%.6f seconds ago)\n", message.timestamp, (now - message.timestamp) / 1e6);
	} else {
		PX4_INFO_RAW("\n");
	}
	PX4_INFO_RAW("\tuid: %" PRIu64 "\n", message.uid);
	PX4_INFO_RAW("\tfirmware_version: %" PRIu32 "\n", message.firmware_version);
	PX4_INFO_RAW("\thardware_version: %" PRIu32 "\n", message.hardware_version);
	PX4_INFO_RAW("\troll_min: %.4f\n", (double)message.roll_min);
	PX4_INFO_RAW("\troll_max: %.4f\n", (double)message.roll_max);
	PX4_INFO_RAW("\tpitch_min: %.4f\n", (double)message.pitch_min);
	PX4_INFO_RAW("\tpitch_max: %.4f\n", (double)message.pitch_max);
	PX4_INFO_RAW("\tyaw_min: %.4f\n", (double)message.yaw_min);
	PX4_INFO_RAW("\tyaw_max: %.4f\n", (double)message.yaw_max);
	PX4_INFO_RAW("\tcap_flags: %u (0b", message.cap_flags);
	for (int i = (sizeof(message.cap_flags) * 8) - 1; i >= 0; i--) { PX4_INFO_RAW("%lu%s", (unsigned long) message.cap_flags >> i & 1, ((unsigned)i < (sizeof(message.cap_flags) * 8) - 1 && i % 4 == 0 && i > 0) ? "'" : ""); }
	PX4_INFO_RAW(")\n");
	PX4_INFO_RAW("\tcustom_cap_flags: %u (0b", message.custom_cap_flags);
	for (int i = (sizeof(message.custom_cap_flags) * 8) - 1; i >= 0; i--) { PX4_INFO_RAW("%lu%s", (unsigned long) message.custom_cap_flags >> i & 1, ((unsigned)i < (sizeof(message.custom_cap_flags) * 8) - 1 && i % 4 == 0 && i > 0) ? "'" : ""); }
	PX4_INFO_RAW(")\n");
	PX4_INFO_RAW("\tvendor_name: [%u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u]\n", message.vendor_name[0], message.vendor_name[1], message.vendor_name[2], message.vendor_name[3], message.vendor_name[4], message.vendor_name[5], message.vendor_name[6], message.vendor_name[7], message.vendor_name[8], message.vendor_name[9], message.vendor_name[10], message.vendor_name[11], message.vendor_name[12], message.vendor_name[13], message.vendor_name[14], message.vendor_name[15], message.vendor_name[16], message.vendor_name[17], message.vendor_name[18], message.vendor_name[19], message.vendor_name[20], message.vendor_name[21], message.vendor_name[22], message.vendor_name[23], message.vendor_name[24], message.vendor_name[25], message.vendor_name[26], message.vendor_name[27], message.vendor_name[28], message.vendor_name[29], message.vendor_name[30], message.vendor_name[31]);
	PX4_INFO_RAW("\tmodel_name: [%u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u]\n", message.model_name[0], message.model_name[1], message.model_name[2], message.model_name[3], message.model_name[4], message.model_name[5], message.model_name[6], message.model_name[7], message.model_name[8], message.model_name[9], message.model_name[10], message.model_name[11], message.model_name[12], message.model_name[13], message.model_name[14], message.model_name[15], message.model_name[16], message.model_name[17], message.model_name[18], message.model_name[19], message.model_name[20], message.model_name[21], message.model_name[22], message.model_name[23], message.model_name[24], message.model_name[25], message.model_name[26], message.model_name[27], message.model_name[28], message.model_name[29], message.model_name[30], message.model_name[31]);
	PX4_INFO_RAW("\tcustom_name: [%u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u, %u]\n", message.custom_name[0], message.custom_name[1], message.custom_name[2], message.custom_name[3], message.custom_name[4], message.custom_name[5], message.custom_name[6], message.custom_name[7], message.custom_name[8], message.custom_name[9], message.custom_name[10], message.custom_name[11], message.custom_name[12], message.custom_name[13], message.custom_name[14], message.custom_name[15], message.custom_name[16], message.custom_name[17], message.custom_name[18], message.custom_name[19], message.custom_name[20], message.custom_name[21], message.custom_name[22], message.custom_name[23], message.custom_name[24], message.custom_name[25], message.custom_name[26], message.custom_name[27], message.custom_name[28], message.custom_name[29], message.custom_name[30], message.custom_name[31]);
	PX4_INFO_RAW("\tgimbal_device_compid: %u\n", message.gimbal_device_compid);
	
}
