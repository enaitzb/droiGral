/****************************************************************************
 *
 *   Copyright (C) 2013-2016 PX4 Development Team. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 * 3. Neither the name PX4 nor the names of its contributors may be
 *    used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
 * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 ****************************************************************************/

/* Auto-generated by genmsg_cpp from file position_setpoint.msg */


#include <inttypes.h>
#include <px4_platform_common/log.h>
#include <px4_platform_common/defines.h>
#include <uORB/topics/position_setpoint.h>
#include <uORB/topics/uORBTopics.hpp>
#include <drivers/drv_hrt.h>
#include <lib/drivers/device/Device.hpp>
#include <lib/matrix/matrix/math.hpp>
#include <lib/mathlib/mathlib.h>

constexpr char __orb_position_setpoint_fields[] = "uint64_t timestamp;double lat;double lon;float vx;float vy;float vz;float alt;float yaw;float yawspeed;float loiter_radius;float acceptance_radius;float cruising_speed;float cruising_throttle;bool valid;uint8_t type;bool velocity_valid;uint8_t velocity_frame;bool alt_valid;bool yaw_valid;bool yawspeed_valid;int8_t landing_gear;int8_t loiter_direction;bool disable_weather_vane;uint8_t[6] _padding0;";

ORB_DEFINE(position_setpoint, struct position_setpoint_s, 74, __orb_position_setpoint_fields, static_cast<uint8_t>(ORB_ID::position_setpoint));


void print_message(const position_setpoint_s &message)
{

	PX4_INFO_RAW(" position_setpoint_s\n");

	const hrt_abstime now = hrt_absolute_time();

	if (message.timestamp != 0) {
		PX4_INFO_RAW("\ttimestamp: %" PRIu64 "  (%.6f seconds ago)\n", message.timestamp, (now - message.timestamp) / 1e6);
	} else {
		PX4_INFO_RAW("\n");
	}
	PX4_INFO_RAW("\tlat: %.6f\n", message.lat);
	PX4_INFO_RAW("\tlon: %.6f\n", message.lon);
	PX4_INFO_RAW("\tvx: %.4f\n", (double)message.vx);
	PX4_INFO_RAW("\tvy: %.4f\n", (double)message.vy);
	PX4_INFO_RAW("\tvz: %.4f\n", (double)message.vz);
	PX4_INFO_RAW("\talt: %.4f\n", (double)message.alt);
	PX4_INFO_RAW("\tyaw: %.4f\n", (double)message.yaw);
	PX4_INFO_RAW("\tyawspeed: %.4f\n", (double)message.yawspeed);
	PX4_INFO_RAW("\tloiter_radius: %.4f\n", (double)message.loiter_radius);
	PX4_INFO_RAW("\tacceptance_radius: %.4f\n", (double)message.acceptance_radius);
	PX4_INFO_RAW("\tcruising_speed: %.4f\n", (double)message.cruising_speed);
	PX4_INFO_RAW("\tcruising_throttle: %.4f\n", (double)message.cruising_throttle);
	PX4_INFO_RAW("\tvalid: %s\n", (message.valid ? "True" : "False"));
	PX4_INFO_RAW("\ttype: %u\n", message.type);
	PX4_INFO_RAW("\tvelocity_valid: %s\n", (message.velocity_valid ? "True" : "False"));
	PX4_INFO_RAW("\tvelocity_frame: %u\n", message.velocity_frame);
	PX4_INFO_RAW("\talt_valid: %s\n", (message.alt_valid ? "True" : "False"));
	PX4_INFO_RAW("\tyaw_valid: %s\n", (message.yaw_valid ? "True" : "False"));
	PX4_INFO_RAW("\tyawspeed_valid: %s\n", (message.yawspeed_valid ? "True" : "False"));
	PX4_INFO_RAW("\tlanding_gear: %d\n", message.landing_gear);
	PX4_INFO_RAW("\tloiter_direction: %d\n", message.loiter_direction);
	PX4_INFO_RAW("\tdisable_weather_vane: %s\n", (message.disable_weather_vane ? "True" : "False"));
	
}
